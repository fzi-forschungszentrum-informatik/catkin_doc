#!/usr/bin/env python
# -- BEGIN LICENSE BLOCK ----------------------------------------------
# Copyright (c) 2019, FZI Forschungszentrum Informatik
#
# Redistribution and use in source and binary forms, with or without modification, are permitted
# provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions
#    and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of
#    conditions and the following disclaimer in the documentation and/or other materials provided
#    with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used to
#    endorse or promote products derived from this software without specific prior written
#    permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
# WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# -- END LICENSE BLOCK ------------------------------------------------

"""catkin_doc helps creating documentations for catkin packages"""
import os
import argparse

from catkin_doc.pkghandler import PkgHandler

from catkin_doc.formatters.markdown_formatter import MarkdownFormatter

import catkin_doc.pkghandler


def parse_arguments():
    """Parses command  line arguments"""
    parser = argparse.ArgumentParser(
        description="Autogenerate ROS-API documentation for catkin packages")
    parser.add_argument("package_root",
                        help="Root folder of the package that should be documented")
    parser.add_argument("-f", "--formatter",
                        help="Use Markdown formatter for output. Defaults to 'md'",
                        type=str,
                        choices=["md"],
                        default="md")
    parser.add_argument("-o", "--output-filename",
                        help="Output filename for generated documentation. "
                             "(Relative to package root, defaults to 'README.md')",
                        default="README.md")
    options = parser.parse_args()

    return options


def main():
    """
    This function will search for python and cpp nodes.
    than for each of this nodes it will search for existing docu
    if no docu is found it will ask for path to docu
    than parse each docu file and compare to previously generated nodes
    at last the merged nodes are written to given file format
    """

    options = parse_arguments()

    pkg_handler = PkgHandler(options.package_root, options.output_filename)

    formatter = None
    if options.formatter == "md":
        formatter = MarkdownFormatter()
    out_string = pkg_handler.doc.to_string(1, formatter)

    new_filename = os.path.join(options.package_root, options.output_filename)
    with open(new_filename, "w") as doc_out:
        doc_out.write(out_string)


if __name__ == "__main__":
    main()
