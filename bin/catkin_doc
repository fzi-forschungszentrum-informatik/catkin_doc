#!/usr/bin/env python
"""catkin_doc helps creating documentations for catkin packages"""

import catkin_doc.cmakeparser
import catkin_doc.pkghandler
import catkin_doc.nodeconverter
import catkin_doc.rstparser
import catkin_doc.mdparser
import catkin_doc.nodecomparator
import sys


def main():
    """
    This function will search for python and cpp nodes.
    than for each of this nodes it will search for existing docu
    if no docu is found it will ask for path to docu
    than parse each docu file and compare to previously generated nodes
    at last the merged nodes are written to given file format
    """
    package_path = sys.argv[1]
    file_format = sys.argv[2]
    cpp_handler = catkin_doc.cmakeparser.CmakeListParser(package_path)
    py_handler = catkin_doc.pkghandler.PkgHandler(package_path)
    nodeconverter = catkin_doc.nodeconverter.NodeConverter()
    docu_list = catkin_doc.pkghandler.PkgHandler.find_docu(package_path)

    for parser in cpp_handler.parser:
        found_parser = False
        for docu in docu_list:
          if ("/" + parser.node.filename + ".rst") in docu:
              found_parser = True
              rst_parser = catkin_doc.rstparser.RstParser(docu)
              comp = catkin_doc.nodecomparator.NodeComparator(parser.node, rst_parser.node)
              nodeconverter.convert_to_file(comp.merged_node, file_format)
          elif("/" + parser.node.filename + ".md") in docu:
              found_parser =True
              md_parser = catkin_doc.mdparser.MdParser(docu)
              comp = catkin_doc.nodecomparator.NodeComparator(parser.node, md_parser.node)
              nodeconverter.convert_to_file(comp.merged_node, file_format)
        if not found_parser:
            answer = raw_input("Did not found matching docu for node " + parser.node.filename +
                               ". \n Please enter path to documentation file or press enter to skip compare and write node to docu. \n")
            if answer == "":
                print("Skipping compare ...\n")
                nodeconverter.convert_to_file(parser.node, file_format)
            else:
                if ".rst" in answer:
                    rst_parser = catkin_doc.rstparser.RstParser(answer)
                    comp = catkin_doc.nodecomparator.NodeComparator(parser.node, rst_parser.node)
                    nodeconverter.convert_to_file(comp.merged_node, file_format)
                elif ".md" in answer:
                    md_parser = catkin_doc.mdparser.MdParser(answer)
                    comp = catkin_doc.nodecomparator.NodeComparator(parser.node, md_parser.node)
                    nodeconverter.convert_to_file(comp.merged_node, file_format)
                else:
                    print("Inserted path does not match rst or md file. Skipping compare ...")
                    nodeconverter.convert_to_file(parser.node, file_format)


    for parser in py_handler.parser:
        found_parser = False
        for docu in docu_list:
          if ("/" + parser.node.filename + ".rst") in docu:
              found_parser = True
              rst_parser = catkin_doc.rstparser.RstParser(docu)
              comp = catkin_doc.nodecomparator.NodeComparator(parser.node, rst_parser.node)
              nodeconverter.convert_to_file(comp.merged_node, file_format)
          elif ("/" + parser.node.filename + ".md") in docu:
              found_parser =True
              md_parser = catkin_doc.mdparser.MdParser(docu)
              comp = catkin_doc.nodecomparator.NodeComparator(parser.node, md_parser.node)
              nodeconverter.convert_to_file(comp.merged_node, file_format)
        if not found_parser:
            answer = raw_input("Did not found matching docu for node " + parser.node.filename + " in directory " + package_path + "and its subdirectories." +
                               " \n Please enter path to documentation file or press enter to skip compare and write node to docu. \n")
            if answer == "":
                print("Skipping compare ...\n")
                nodeconverter.convert_to_file(parser.node, file_format)
            else:
                if ".rst" in answer:
                    rst_parser = catkin_doc.rstparser.RstParser(answer)
                    comp = catkin_doc.nodecomparator.NodeComparator(parser.node, rst_parser.node)
                    nodeconverter.convert_to_file(comp.merged_node, file_format)
                elif ".md" in answer:
                    md_parser = catkin_doc.mdparser.MdParser(answer)
                    comp = catkin_doc.nodecomparator.NodeComparator(parser.node, md_parser.node)
                    nodeconverter.convert_to_file(comp.merged_node, file_format)
                else:
                    print("Inserted path does not match rst or md file. Skipping compare ...")
                    nodeconverter.convert_to_file(parser.node, file_format)

if __name__ == "__main__":
    main()
