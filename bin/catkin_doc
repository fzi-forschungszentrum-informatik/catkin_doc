#!/usr/bin/env python
"""catkin_doc helps creating documentations for catkin packages"""
import os
import argparse

from catkin_doc.pkghandler import PkgHandler

from catkin_doc.formatters.markdown_formatter import MarkdownFormatter

import catkin_doc.pkghandler


def parse_arguments():
    """Parses command  line arguments"""
    parser = argparse.ArgumentParser(
        description="Autogenerate ROS-API documentation for catkin packages")
    parser.add_argument("package_root",
                        help="Root folder of the package that should be documented")
    parser.add_argument("-f", "--formatter",
                        help="Use Markdown formatter for output. Defaults to 'md'",
                        type=str,
                        choices=["md"],
                        default="md")
    parser.add_argument("-o", "--output-filename",
                        help="Output filename for generated documentation. "
                             "(Relative to package root, defaults to 'README.md')",
                        default="README.md")
    options = parser.parse_args()

    return options


def main():
    """
    This function will search for python and cpp nodes.
    than for each of this nodes it will search for existing docu
    if no docu is found it will ask for path to docu
    than parse each docu file and compare to previously generated nodes
    at last the merged nodes are written to given file format
    """

    options = parse_arguments()

    pkg_handler = PkgHandler(options.package_root)

    formatter = None
    if options.formatter == "md":
        formatter = MarkdownFormatter()
    out_string = pkg_handler.doc.to_string(1, formatter)

    new_filename = os.path.join(options.package_root, options.output_filename)
    with open(new_filename, "w") as doc_out:
        doc_out.write(out_string)


if __name__ == "__main__":
    main()
